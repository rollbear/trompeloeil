language: cpp
sudo: required
dist: trusty

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.5
          packages:
            - g++-6
            - clang-3.5
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-3.5" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - g++-6
            - clang-3.6
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-3.6" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - g++-6
            - clang-3.7
            - llvm-3.7-runtime
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-3.7" SANITIZE=true
      before_install:
        # The clang runtime for the address sanitizer is missing from the
        # apt, hence the downloaded tarballs.

        - wget http://releases.llvm.org/3.7.1/clang+llvm-3.7.1-x86_64-linux-gnu-ubuntu-14.04.tar.xz
        - tar -xvf clang+llvm-3.7.1-x86_64-linux-gnu-ubuntu-14.04.tar.xz
        - sudo cp -n clang+llvm-3.7.1-x86_64-linux-gnu-ubuntu-14.04/lib/clang/3.7.1/lib/linux/*.a /usr/lib/llvm-3.7/lib/clang/3.7.1/lib/linux/

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - g++-6
            - clang-3.8
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-3.8" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9
          packages:
            - g++-6
            - clang-3.9
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-3.9" SANITIZE=true
      before_install:
        # Unlike with clang++-3.7, the runtime libraries exists with 3.9,
        # but still doesn't work because of gold linker version incompatibility.
        # The tarball download takes care of that.

        - wget http://releases.llvm.org/3.9.1/clang+llvm-3.9.1-x86_64-linux-gnu-ubuntu-14.04.tar.xz
        - tar -xvf clang+llvm-3.9.1-x86_64-linux-gnu-ubuntu-14.04.tar.xz
        - sudo cp clang+llvm-3.9.1-x86_64-linux-gnu-ubuntu-14.04/lib/clang/3.9.1/lib/linux/*.a /usr/lib/llvm-3.9/lib/clang/3.9.1/lib/linux/

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - g++-6
            - clang-4.0
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-4.0" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - g++-6
            - clang-5.0
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-5.0" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - g++-6
            - clang-6.0
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="clang++-6.0" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.8
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-4.8" CXXFLAGS="-std=c++11" CXX_STANDARD="11" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-4.9" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-5" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-6" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-7" SANITIZE=true

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
      env:
        - COMPILER="g++-8" SANITIZE=true

    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env:
        - COMPILER="clang++" SANITIZE=false

    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env:
        - COMPILER="clang++" SANITIZE=false

    - os: osx
      osx_image: xcode9.3
      compiler: clang
      env:
        - COMPILER="clang++" SANITIZE=false

install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      which cmake || brew install cmake
    fi
  - JOBS=2 # Travis machines have 2 cores.

before_script:
  - CXX=${COMPILER} CXXFLAGS=${CXXFLAGS} ./check_errors.sh ||
    FAILURES="$?" && if [[ ${CXX_STANDARD} == "11" && ${FAILURES} != "4" ]]; then
      echo "Expected four failures from C++11 build, got " ${FAILURES};
      exit 1;
    fi
  - mkdir build && cd build
  - CXX=${COMPILER} cmake -DCXX_STANDARD="${CXX_STANDARD}" -DCMAKE_BUILD_TYPE=Debug -DTRAVIS_JOB_ID='${TRAVIS_JOB_ID}' -DSANITIZE=${SANITIZE} ..
  - cmake --build . --target self_test --config Debug -- -j${JOBS}

script:
  - ctest -V --output-on-failure -C Debug -j${JOBS}

after_success:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      cmake --build . --target run_coverage --config Debug -- -j${JOBS}
    fi
